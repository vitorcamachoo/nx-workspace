{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';\nimport { json } from '@angular-devkit/core';\nimport { Schema } from './schema';\nconst NetlifyAPI = require('netlify');\n\nexport default createBuilder(\n    async (builderConfig: Schema, context: BuilderContext): Promise<BuilderOutput> => {\n        context.reportStatus(`Executing deploy...`);\n        context.logger.info(`Executing netlify deploy command ...... `);\n\n        if (builderConfig.noBuild) {\n            context.logger.info(`üì¶ Skipping build`);\n        } else {\n            const configuration = builderConfig.configuration || 'production';\n\n            const overrides = {\n                // this is an example how to override the workspace set of options\n                ...(builderConfig.baseHref && { baseHref: builderConfig.baseHref })\n            };\n\n            if (!context.target) {\n                throw new Error('Cannot build the application without a target');\n            }\n\n            const baseHref = builderConfig.baseHref ? `Your base-href: \"${builderConfig.baseHref}` : '';\n            const buildTarget = builderConfig.buildTarget ? builderConfig.buildTarget : 'build';\n            context.logger.info(`üì¶ Building \"${context.target.project}\". Configuration: \"${configuration}\". Build Command: ${buildTarget}. ${baseHref}`);\n\n            const build = await context.scheduleTarget({\n                target: buildTarget,\n                project: context.target.project || '',\n                configuration\n            }, overrides as json.JsonObject);\n\n            const buildResult = await build.result;\n\n            if (buildResult.success !== true) {\n                context.logger.error(`‚ùå Application build failed`);\n                return {\n                    error: `‚ùå Application build failed`,\n                    success: false\n                };\n            }\n\n            context.logger.info(`‚úî Build Completed`);\n        }\n\n        const netlifyToken = process.env.NETLIFY_TOKEN || builderConfig.netlifyToken;\n        if (netlifyToken === '' || netlifyToken === undefined) {\n            context.logger.error(\"üö® Netlify Token not found !\");\n            return { success: false };\n        }\n\n        let siteId = process.env.NETLIFY_API_ID || builderConfig.siteId;\n        if (siteId === '' || siteId === undefined) {\n            // site id is needed if the create option is false\n            if (builderConfig.create === false) {\n                context.logger.error(\"üö® API ID (Site ID) not found !\");\n                return { success: false };\n            }\n        }\n\n        const client = new NetlifyAPI(netlifyToken, {\n            userAgent: 'netlify/js-client',\n            scheme: 'https',\n            host: 'api.netlify.com',\n            pathPrefix: '/api/v1',\n            globalParams: {}\n        });\n\n        // let check if the site exists\n        let site;\n        try {\n            // only when the site id is set\n            if (siteId) {\n                site = await client.getSite({ site_id: siteId });\n            }\n        } catch (e) {\n            switch (e.status) {\n                case 404:\n                    context.logger.error(`‚ùå Site \"${siteId}\" : Not found`);\n                    // if the create is false - just return the error\n                    if (builderConfig.create !== true) {\n                        return {\n                            success: false\n                        };\n                    }\n                    break;\n                case 401:\n                    context.logger.fatal(\"üö® Netlify: Unauthorized Token\");\n                    return {\n                        success: false\n                    };\n                default:\n                    // for all other errors \n                    return {\n                        error: e.message,\n                        success: false\n                    };\n            }\n        }\n\n        // lets create the site\n        if (!site && builderConfig.create) {\n            try {\n                context.logger.info(`Creating new site for the application`);\n                site = await client.createSite();\n                siteId = site.id as string;\n                context.logger.info(`‚úî Site \"${site.name}\" (${siteId}) created. Please update the angular.json so on the next run we can re-deploy on the same site`);\n            } catch (e) {\n                context.logger.error(\"üö® Unable to create the site\");\n                return {\n                    error: e.message,\n                    success: false\n                };\n            }\n        }\n\n        // if we still don't have the site return with error\n        if (!site) {\n            context.logger.error(\"üö® Unable to deploy as we don't have any context about the site\");\n            return {\n                error: \"üö® Unable to deploy as we don't have any context about the site\",\n                success: false\n            };\n        }\n\n        // lets deploy the application to the site\n        try {\n            context.logger.info(`Deploying project from üìÇ ./${builderConfig.outputPath}`);\n            const response = await client.deploy(siteId, builderConfig.outputPath);\n            context.logger.info(`‚úî Your updated site üï∏  is running at ${response.deploy.ssl_url}`);\n            return { success: true };\n        } catch (e) {\n            context.logger.error(\"‚ùå Deployment failed\");\n            return {\n                error: e.message,\n                success: false\n            };\n        }\n    });"]}